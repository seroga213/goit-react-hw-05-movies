{"version":3,"file":"static/js/431.39434d6f.chunk.js","mappings":"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","sources":["components/CastList/CastList-styled.jsx","components/CastList/CastList.jsx","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport const Item = styled.li`\n  width: 150px;\n  padding: 5px;\n  text-align: center;\n  list-style: none;\n`;\n\nexport const Img = styled.img`\n  width: 150px;\n  border-radius: 15%;\n`;\n\nexport const Text = styled.p`\n  margin: 0px;\n  font-weight: bold;\n`;","import { List, Item, Img, Text } from './CastList-styled';\n\nconst CastList = ({ castAr }) => {\n  if (castAr.length === 0) {\n    return <p>We don't have any information for cast of this movie.</p>;\n  } else {\n    return (\n      <List>\n        {castAr.map(cast => (\n          <Item key={cast.id}>\n            <Img\n              src={\n                cast.profile_path !== null\n                  ? `https://image.tmdb.org/t/p/w500${cast.profile_path}`\n                  : 'https://via.placeholder.com/150x225/808080/ff4e00/?text=GoIT.React'\n              }\n              alt=\"\"\n            ></Img>\n            <Text>{cast.original_name}</Text>\n            <Text>\n              Character: <span>{cast.character}</span>\n            </Text>\n          </Item>\n        ))}\n      </List>\n    );\n  }\n};\n\nexport default CastList;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchCasts } from '../../services/api';\nimport CastList from '../CastList/CastList';\n\nconst Cast = () => {\n  const [castArrey, setCastArrey] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === '') {\n      return;\n    } else {\n      fetchCasts(movieId)\n        .then(actors => {\n          setCastArrey(actors.cast);\n        })\n        .catch(error => console.log(error));\n    }\n  }, [movieId]);\n\n  return (\n    <section>\n      <CastList castAr={castArrey} />\n    </section>\n  );\n};\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const KEY_API = 'a40de3382fcc9ef9d15093113911e3dd';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function fetchPopularFilms() {\n  const url = `${BASE_URL}/trending/all/day?api_key=${KEY_API}`;\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}\n\nexport async function fetchSearchFilms(searchWord) {\n  const url = `${BASE_URL}/search/movie?api_key=${KEY_API}&language=en-US&page=1&include_adult=false&query=${searchWord}`;\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}\n\nexport async function fetchDetailFilm(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}?api_key=${KEY_API}&language=en-US`;\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}\n\nexport async function fetchCasts(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY_API}&language=en-US`;\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}\n\nexport async function fetchReviews(movieId) {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY_API}&language=en-US&page=1`;\n  const response = await fetch(url);\n  const movie = await response.json();\n  return movie;\n}"],"names":["List","styled","Item","Img","Text","castAr","length","map","cast","src","profile_path","alt","original_name","character","id","useState","castArrey","setCastArrey","movieId","useParams","useEffect","fetchCasts","then","actors","catch","error","console","log","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","KEY_API","BASE_URL","fetchPopularFilms","url","fetch","response","json","movie","fetchSearchFilms","searchWord","fetchDetailFilm","fetchReviews"],"sourceRoot":""}